---
- builder:
    name: run-rke-ete
    builders:
      - shell: |
          #!/bin/bash
          set +x
          . $WORKSPACE/deployment/heat/onap-rke/env/{lab-name}/{tenant-name}-openrc
          . $JENKINS_HOME/onap-lab-ci/labs/{lab-name}-openrc
          source $WORKSPACE/test/ete/scripts/install_openstack_cli.sh

          set -x
          rm -rf $WORKSPACE/archives
          mkdir -p $WORKSPACE/archives

          SSH_KEY=~/.ssh/onap_key
          ENV_FILE=./env/{lab-name}/onap-oom.env

          #Use new encryption method
          pushd $WORKSPACE/deployment/heat/onap-rke/scripts
          javac Crypto.java
          SO_ENCRYPTION_KEY=aa3871669d893c7fb8abbcda31b88b4f
          export OS_PASSWORD_ENCRYPTED=$(java Crypto "$OS_PASSWORD" "$SO_ENCRYPTION_KEY")
          popd


          STACK_NAME="{stack-name}"


          $WORKSPACE/test/ete/scripts/teardown-onap.sh -q

          # temporary workaround to handle undeletable stacks
          if [ ! -z "$(openstack stack show -c stack_status -f value $STACK_NAME)" ]; then
            STACK_NAME="{stack-name}-$RANDOM"
          fi

          cd $WORKSPACE/deployment/heat/onap-rke/
          envsubst < $ENV_FILE > $ENV_FILE~
          if ! openstack stack create -t ./onap-oom.yaml -e $ENV_FILE~ $STACK_NAME --parameter docker_manifest={docker_manifest} --parameter portal_hostname={stack-name}.{lab-name}.onapci.org --parameter integration_gerrit_branch={gerrit_branch} --parameter integration_gerrit_refspec={gerrit_refspec}; then
            exit 1
          fi
          while [ "CREATE_IN_PROGRESS" == "$(openstack stack show -c stack_status -f value $STACK_NAME)" ]; do
            sleep 30
          done

          STATUS=$(openstack stack show -c stack_status -f value $STACK_NAME)
          echo $STATUS
          if [ "CREATE_COMPLETE" != "$STATUS" ]; then
            openstack stack show -c stack_status_reason -f value $STACK_NAME
            exit 1
          fi

          for i in $(seq 1 30); do
            sleep 30
            RANCHER_IP=$(openstack stack output show $STACK_NAME rancher_vm_ip -c output_value -f value)
            K8S_IP=$(openstack stack output show $STACK_NAME k8s_01_vm_ip -c output_value -f value)
            timeout 1 ping -c 1 "$RANCHER_IP" && break
          done


          # wait until all k8s VMs have fully initialized
          for VM_NAME in $(grep _vm: ./onap-oom.yaml | cut -d: -f1); do
              echo $VM_NAME
              VM_IP=$(openstack stack output show $STACK_NAME $VM_NAME'_ip' -c output_value -f value)
              ssh-keygen -R $VM_IP
              until ssh -o StrictHostKeychecking=no -i $SSH_KEY ubuntu@$VM_IP ls -ad /dockerdata-nfs/.git; do
                  sleep 1m
              done
          done

          cat > ./cluster.yml~ <<EOF
          # If you intened to deploy Kubernetes in an air-gapped environment,
          # please consult the documentation on how to configure custom RKE images.
          nodes:
          EOF

          for VM_NAME in $(grep -E 'k8s_.+_vm:' ./onap-oom.yaml | cut -d: -f1); do
              echo $VM_NAME
              VM_IP=$(openstack stack output show $STACK_NAME $VM_NAME'_ip' -c output_value -f value)
              VM_PRIVATE_IP=$(openstack stack output show $STACK_NAME $VM_NAME'_private_ip' -c output_value -f value)
              VM_HOSTNAME=$STACK_NAME-$(echo $VM_NAME | tr '_' '-' | cut -d- -f1,2)
              cat >> ./cluster.yml~ <<EOF
          - address: $VM_IP
            port: "22"
            internal_address: $VM_PRIVATE_IP
            role:
            - worker
            hostname_override: "$VM_HOSTNAME"
            user: ubuntu
            docker_socket: /var/run/docker.sock
            ssh_key: ""
            ssh_key_path: "$SSH_KEY"
            ssh_cert: ""
            ssh_cert_path: ""
            labels: {{}}
          EOF
          done

          for VM_NAME in $(grep -E 'orch_.+_vm:' ./onap-oom.yaml | cut -d: -f1); do
              echo $VM_NAME
              VM_IP=$(openstack stack output show $STACK_NAME $VM_NAME'_ip' -c output_value -f value)
              VM_PRIVATE_IP=$(openstack stack output show $STACK_NAME $VM_NAME'_private_ip' -c output_value -f value)
              VM_HOSTNAME=$STACK_NAME-$(echo $VM_NAME | tr '_' '-' | cut -d- -f1,2)
              cat >> ./cluster.yml~ <<EOF
          - address: $VM_IP
            port: "22"
            internal_address: $VM_PRIVATE_IP
            role:
            - controlplane
            - etcd
            hostname_override: "$VM_HOSTNAME"
            user: ubuntu
            docker_socket: /var/run/docker.sock
            ssh_key: ""
            ssh_key_path: "$SSH_KEY"
            ssh_cert: ""
            ssh_cert_path: ""
            labels: {{}}
          EOF
          done

          cat >> ./cluster.yml~ <<EOF
          services:
            etcd:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
              external_urls: []
              ca_cert: ""
              cert: ""
              key: ""
              path: ""
              snapshot: null
              retention: ""
              creation: ""
              backup_config: null
            kube-api:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
              service_cluster_ip_range: 10.43.0.0/16
              service_node_port_range: ""
              pod_security_policy: false
              always_pull_images: false
            kube-controller:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
              cluster_cidr: 10.42.0.0/16
              service_cluster_ip_range: 10.43.0.0/16
            scheduler:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
            kubelet:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
              cluster_domain: cluster.local
              infra_container_image: ""
              cluster_dns_server: 10.43.0.10
              fail_swap_on: false
            kubeproxy:
              image: ""
              extra_args: {{}}
              extra_binds: []
              extra_env: []
          network:
            plugin: canal
            options: {{}}
          authentication:
            strategy: x509
            sans: []
            webhook: null
          addons: ""
          addons_include: []
          system_images:
            etcd: rancher/coreos-etcd:v3.2.24-rancher1
            alpine: rancher/rke-tools:v0.1.27
            nginx_proxy: rancher/rke-tools:v0.1.27
            cert_downloader: rancher/rke-tools:v0.1.27
            kubernetes_services_sidecar: rancher/rke-tools:v0.1.27
            kubedns: rancher/k8s-dns-kube-dns:1.15.0
            dnsmasq: rancher/k8s-dns-dnsmasq-nanny:1.15.0
            kubedns_sidecar: rancher/k8s-dns-sidecar:1.15.0
            kubedns_autoscaler: rancher/cluster-proportional-autoscaler:1.0.0
            coredns: coredns/coredns:1.2.6
            coredns_autoscaler: rancher/cluster-proportional-autoscaler:1.0.0
            kubernetes: rancher/hyperkube:v1.13.4-rancher1
            flannel: rancher/coreos-flannel:v0.10.0-rancher1
            flannel_cni: rancher/flannel-cni:v0.3.0-rancher1
            calico_node: rancher/calico-node:v3.4.0
            calico_cni: rancher/calico-cni:v3.4.0
            calico_controllers: ""
            calico_ctl: rancher/calico-ctl:v2.0.0
            canal_node: rancher/calico-node:v3.4.0
            canal_cni: rancher/calico-cni:v3.4.0
            canal_flannel: rancher/coreos-flannel:v0.10.0
            weave_node: weaveworks/weave-kube:2.5.0
            weave_cni: weaveworks/weave-npc:2.5.0
            pod_infra_container: rancher/pause:3.1
            ingress: rancher/nginx-ingress-controller:0.21.0-rancher3
            ingress_backend: rancher/nginx-ingress-controller-defaultbackend:1.4-rancher1
            metrics_server: rancher/metrics-server:v0.3.1
          ssh_key_path: "$SSH_KEY"
          ssh_cert_path: ""
          ssh_agent_auth: false
          authorization:
            mode: rbac
            options: {{}}
          ignore_docker_version: false
          kubernetes_version: ""
          private_registries: []
          ingress:
            provider: ""
            options: {{}}
            node_selector: {{}}
            extra_args: {{}}
          cluster_name: "$STACK_NAME"
          cloud_provider:
            name: ""
          prefix_path: ""
          addon_job_timeout: 0
          bastion_host:
            address: ""
            port: ""
            user: ""
            ssh_key: ""
            ssh_key_path: ""
            ssh_cert: ""
            ssh_cert_path: ""
          monitoring:
            provider: ""
            options: {{}}
          restore:
            restore: false
            snapshot_name: ""
          dns: null
          EOF

          rm -rf ./target
          mkdir -p ./target
          cp ./cluster.yml~ ./target/cluster.yml
          pushd ./target

          # spin up k8s with RKE
          until rke up; do
              sleep 1m
              rke remove
          done

          scp -i $SSH_KEY ./kube_config_cluster.yml root@$RANCHER_IP:/root/.kube/config
          popd


          set +x
          ~/onap-lab-ci/labs/set-dns-record.sh "{stack-name}.{lab-name}" $K8S_IP
          set -x

          ssh -o StrictHostKeychecking=no -i $SSH_KEY ubuntu@$RANCHER_IP "sed -u '/Cloud-init.*finished/q' <(tail -n+0 -f /var/log/cloud-init-output.log)"
          PREV_RESULT=0
          for n in $(seq 1 20); do
            RESULT=$(ssh -i $SSH_KEY ubuntu@$RANCHER_IP 'sudo su -c "kubectl -n onap get pods"' | grep -vE 'NAME|Completed|Error|1/1|2/2' | wc -l)
            if [[ $? -eq 0 && ( $RESULT -eq 0 || $RESULT -eq $PREV_RESULT ) ]]; then
              break
            fi
            sleep 20m
            PREV_RESULT=$RESULT
          done

          PREV_RESULT=0
          for n in $(seq 1 20); do
            echo "Wait for HEALTHCHECK count $n of 10"
            ROBOT_POD=$(ssh -i $SSH_KEY ubuntu@$RANCHER_IP 'sudo su -c "kubectl --namespace onap get pods"' | grep robot | sed 's/ .*//')
            ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/ete-k8s.sh onap health"'
            RESULT=$?
            if [[ $RESULT -lt 10 && ( $RESULT -eq 0 || $RESULT -eq $PREV_RESULT ) ]]; then
              break
            fi
            sleep 20m
            PREV_RESULT=$RESULT
          done
          if [ "$ROBOT_POD" == "" ]; then
            exit 1
          fi

          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep health | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/healthcheck
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/healthcheck

          ssh -i $SSH_KEY root@$RANCHER_IP 'kubectl get pods -n onap'
          ssh -i $SSH_KEY root@$RANCHER_IP "kubectl get pods -n onap -o json" > $WORKSPACE/archives/onap-pods.json


          # demo init
          ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/demo-k8s.sh onap init"'
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep demo_init | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/demo-init
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/demo-init

          # ete distribute
          ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/ete-k8s.sh onap distribute"'
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep distribute | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/distribute
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/distribute

          # ete instantiate
          ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/ete-k8s.sh onap instantiate"'
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep instantiate | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/instantiate
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/instantiate

          # ete portal
          ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/ete-k8s.sh onap portal"'
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep portal | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/portal
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/portal

          # push sample vFWCL policies
          PAP_POD=$(ssh -i $SSH_KEY ubuntu@$RANCHER_IP 'sudo su -c "kubectl --namespace onap get pods"' | grep policy-pap | sed 's/ .*//')
          echo "kubectl exec -it $PAP_POD -n onap -c pap -- bash -c 'export PRELOAD_POLICIES=true; /tmp/policy-install/config/push-policies.sh'" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su

          # ete instantiateDemoVFWCL
          ssh -i $SSH_KEY ubuntu@$RANCHER_IP  'sudo su -l root -c "/root/oom/kubernetes/robot/ete-k8s.sh onap instantiateDemoVFWCL"'
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep instantiateDemoVFWCL | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/instantiateDemoVFWCL
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/instantiateDemoVFWCL

          # restart drools
          echo "kubectl delete pod dev-policy-drools-0 -n onap" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su

          # wait for policy to kick in
          sleep 20m

          # demo vfwclosedloop
          PKG_STACK=$(openstack stack list -f value -c "Stack Name" --sort creation_time:desc | grep Vfmodule_Demo_vPKG | head -1)
          PUBLIC_NET_ID=$(openstack stack show $STACK_NAME -f json | jq -r '.parameters.public_net_id')
          PUBLIC_NET_NAME=$(openstack network show $PUBLIC_NET_ID -f value -c name)
          PKG_IP=$(openstack stack resource show $PKG_STACK vpg_0 -f json | jq -r ".attributes.addresses.$PUBLIC_NET_NAME[0].addr")
          echo "/root/oom/kubernetes/robot/demo-k8s.sh onap vfwclosedloop $PKG_IP" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          LOG_DIR=$(echo "kubectl exec -n onap $ROBOT_POD -- ls -1t /share/logs | grep vfwclosedloop | head -1" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su)
          echo "kubectl cp -n onap $ROBOT_POD:share/logs/$LOG_DIR /tmp/robot/logs/$LOG_DIR" | ssh -i $SSH_KEY ubuntu@$RANCHER_IP sudo su
          echo "Browse Robot results at http://$K8S_IP:30209/logs/$LOG_DIR/"
          mkdir -p $WORKSPACE/archives/vfwclosedloop
          rsync -e "ssh -i $SSH_KEY" -avtz ubuntu@$RANCHER_IP:/tmp/robot/logs/$LOG_DIR/ $WORKSPACE/archives/vfwclosedloop


          cd $WORKSPACE/archives
          rebot -N "ONAP CI" --removekeywords wuks --output output.xml --merge $(ls -rt */output.xml)

          # temporary workaround to delete tlab-oom-daily after deployment
          if [[ "{lab-name}" == "tlab" && "{tenant-name}" == "ETE-HEAT-Test" ]]; then
            $WORKSPACE/test/ete/scripts/teardown-onap.sh -q
          fi

          exit 0

- job-template:
    disabled_var:
    triggers_var:
    name: '{env}-rke-staging-{frequency}'
    description: 'RKE OOM Staging deployment to {lab-name} {tenant-name}'
    disabled: '{obj:disabled_var}'
    project-type: freestyle
    lab-name: ''
    tenant-name: ''
    scm:
      - git-integration:
          branch: "{branch}"
    wrappers:
      - timestamps
      - timeout:
          timeout: 720
          fail: true
    triggers: '{obj:triggers_var}'
    builders:
      - run-rke-ete:
          stack-name: '{stack-name}'
          lab-name: '{lab-name}'
          tenant-name: '{tenant-name}'
          docker_manifest: 'docker-manifest-staging.csv'
          gerrit_branch: '{branch}'
          gerrit_refspec: 'refs/heads/{branch}'
    publishers:
      - integration-robot
      - pods-influxdb
      - archive-logs
      - trigger-lf-lab-job:
          lab-name: '{lab-name}'
